{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","query","setQuery","weather","setWeather","api","console","log","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","key","fetch","then","res","json","result","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLA6GeA,MA1Gf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACMC,EACC,mCADDA,EAEE,0CA+CR,OADAC,QAAQC,IAAIJ,EAAQA,SAElB,qBACEK,UACyB,oBAAhBL,EAAQM,MACXN,EAAQM,KAAKC,KAAO,GAClB,gBAEF,WANR,SASE,qBACEF,UACyB,oBAAhBL,EAAQM,MACXN,EAAQM,KAAKC,KAAO,GAClB,WAEF,MANR,SASE,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAACC,GACTZ,EAASY,EAAEC,OAAOC,QAEpBA,MAAOf,EACPgB,WA1EG,SAACH,GACA,UAAVA,EAAEI,KACJC,MAAM,GAAD,OAAId,EAAJ,qBAAyBJ,EAAzB,+BAAqDI,IACvDe,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLnB,EAAWmB,GACXrB,EAAS,IACTI,QAAQC,IAAIgB,WAsEY,oBAAhBpB,EAAQM,KACd,gCACE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UACGL,EAAQqB,KADX,KACmBrB,EAAQsB,IAAIC,WAE/B,qBAAKlB,UAAU,OAAf,SAxEM,SAACmB,GACnB,IAyBIC,EAVO,CACT,SACA,UACA,YACA,WACA,SACA,WACA,UAGaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EA3BS,CACX,MACA,MACA,MACA,MACA,MACA,OACA,OACA,MACA,OACA,MACA,MACA,OAeiBL,EAAEM,YACjBC,EAAOP,EAAEQ,cACb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GA0CCE,CAAY,IAAIC,WAEzC,sBAAK7B,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UAAuB8B,KAAKC,MAAMpC,EAAQM,KAAKC,MAA/C,YACA,qBAAKF,UAAU,UAAf,SAA0BL,EAAQA,QAAQ,GAAGM,aAIjD,WCzFG+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.c880cce3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./index.css\";\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const api = {\n    key: \"4aa692caf0bf7cf7a224fe81a3ca4959\",\n    base: \"http://api.openweathermap.org/data/2.5/\",\n  };\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then((res) => res.json())\n        .then((result) => {\n          setWeather(result);\n          setQuery(\"\");\n          console.log(result);\n        });\n    }\n  };\n  const dateBuilder = (d) => {\n    let months = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"Aug\",\n      \"Sept\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n\n    let days = [\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n      \"Sunday\",\n    ];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  console.log(weather.weather);\n  return (\n    <div\n      className={\n        typeof weather.main != \"undefined\"\n          ? weather.main.temp > 16\n            ? \"body-app warm\"\n            : \"body-app\"\n          : \"body-app\"\n      }\n    >\n      <div\n        className={\n          typeof weather.main != \"undefined\"\n            ? weather.main.temp > 16\n              ? \"app warm\"\n              : \"app\"\n            : \"app\"\n        }\n      >\n        <main>\n          <div className=\"search-box\">\n            <input\n              type=\"text\"\n              className=\"search-bar\"\n              placeholder=\"Search...\"\n              onChange={(e) => {\n                setQuery(e.target.value);\n              }}\n              value={query}\n              onKeyPress={search}\n            />\n          </div>\n          {typeof weather.main != \"undefined\" ? (\n            <div>\n              <div className=\"location-box\">\n                <div className=\"location\">\n                  {weather.name}, {weather.sys.country}\n                </div>\n                <div className=\"date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"weather-box\">\n                <div className=\"temp\">{Math.round(weather.main.temp)} Â°c</div>\n                <div className=\"weather\">{weather.weather[0].main}</div>\n              </div>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}